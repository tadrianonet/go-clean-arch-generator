package webapp

import (
    "context"
	"errors"
	"{{.Name}}/internal/delivery/dependencies"
	"{{.Name}}/internal/infra"
	"{{.Name}}/internal/interfaces/handlers"
	"log"
	"net/http"
	"os"
	"os/signal"
)

func Start() {
	container := dependencies.Setup()

	err := container.Invoke(func(userHandler *handlers.UserHandler) {
		http.HandleFunc("/users", userHandler.CreateUser)
		http.HandleFunc("/users/get", userHandler.GetUserByID)
	})

	if err != nil {
		log.Fatalf("Erro ao resolver dependÃªncias: %v", err)
	}   

	ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt)
	defer stop()

	// Set up OpenTelemetry.
	otelShutdown, err := infra.SetupOTelSDK(ctx)
	if err != nil {
		return
	}
	// Handle shutdown properly so nothing leaks.
	defer func() {
		err = errors.Join(err, otelShutdown(context.Background()))
	}()

	log.Println("Server started at :8080")
	log.Fatal(http.ListenAndServe(":8080", nil))
}
